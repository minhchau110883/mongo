//Insert a Single Document
db.inventory.insertOne (
    {
        item: "canvas",
        qty: 100,
        tags:["cotton"],
        size: {
            h: 28,
            w: 35.5,
            uom: "cm"
        }
    }
)

db.inventory.find(
    {
        item: "canvas"
    }
)

// Insert Multiple Documents
db.inventory.insertMany([
    { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } },
   { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } },
   { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }
])

db.inventory.find({}).toArray()

db.inventory.insert([
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

// Query Documents
db.inventory.find({status: "D"})

// $in
db.inventory.find(
    {
        status: {
            $in: ["A", "D"]
        }
    }
)

// AND Condition
// $lt
db.inventory.find(
    {
        status: "A",
        qty: {$lt: 30}
    }
)

//OR Condition
db.inventory.find({
    $or: [
        {
            status: "A"
        },
        {
            qty: {$lt: 30}
        }
    ]
})

// Specify AND as well as OR Conditions
// the compound query document selects all documents in the collection where the status equals "A" and either qty is less than ($lt) 30 or item starts with the character p:
db.inventory.find({
    status: "A",
    $or: [
        {qty: {$lt: 30}},
        {item: /^p/}
    ]
})

// Query on Embedded/Nested Documents
// Match an Embedded/Nested Documen
db.inventory.find({
    size: {
        h: 14, w: 21, uom: "cm"
    }
})

// Wrong field order cannot return document
db.inventory.find({
    size: {
        w: 21, h: 14, uom: "cm"
    }
})

// Query on Nested Field
// To specify a query condition on fields in an embedded/nested document, use dot notation ("field.nestedField")
db.inventory.find({
    "size.uom": "in"
})

// Specify Match using Query Operator
db.inventory.find({
    "size.h": {$lt: 15}
})

// Specify AND Condition
db.inventory.find({
    "size.h": {$lt: 15},
    "size.uom": "in",
    status: "D"
})

// Query an Array
db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
]);

// Match an Array
db.inventory.find({
    tags: ["red", "blank"]
})

// with $all
db.inventory.find({
    tags: { $all: ["red", "blank"]}
})

// queries for all documents where tags is an array that contains the string "red" as one of its elements
db.inventory.find({
    tags: "red"
})

db.inventory.find({
    dim_cm: { $gt: 25}
})

// Specify Multiple Conditions for Array Elements
// Query an Array with Compound Filter Conditions on the Array Elements
//one element can satisfy the greater than 15 condition and another element can satisfy the less than 20 condition, or a single element can satisfy both
db.inventory.find({
    dim_cm: { $gt: 15, $lt: 20}
})

// Query for an Array Element that Meets Multiple Criteria
// queries for documents where the dim_cm array contains at least one element that is both greater than ($gt) 22 and less than ($lt) 30:
db.inventory.find({
    dim_cm: {
        $elemMatch: {
            $gt: 22,
            $lt: 30
        }
    }
})


// Query for an Element by the Array Index Position
db.inventory.find({
    "dim_cm.1": { $gt: 25}
})

// Query an Array by Array Length
db.inventory.find({
    tags: { $size: 3}
})

// Query an Array of Embedded Documents
db.inventory.insertMany( [
   { 
       item: "journal", 
       instock: [ 
           { warehouse: "A", qty: 5 }, 
           { warehouse: "C", qty: 15 } 
        ] 
    },
   { item: "notebook", instock: [ { warehouse: "C", qty: 5 } ] },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 } ] },
   { item: "planner", instock: [ { warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 } ] },
   { item: "postcard", instock: [ { warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 } ] }
]);

// Query for a Document Nested in an Array
//  selects all documents where an element in the instock array matches the specified document
db.inventory.find({
    instock: {warehouse: "A", qty: 5}
})

// Specify a Query Condition on a Field Embedded in an Array of Documents
db.inventory.find({
    "instock.qty": { $lte: 20}
})

// Use the Array Index to Query for a Field in the Embedded Document
db.inventory.find({
    "instock.0.qty": { $lte: 20}
})

// Specify Multiple Conditions for Array of Documents
//  A Single Nested Document Meets Multiple Query Conditions on Nested Fields
//      queries for documents where the instock array has at least one embedded document that contains both the field qty equal to 5 and the field warehouse equal to A
db.inventory.find({
    instock: {
        $elemMatch: {
            warehouse: "A",
            qty: 5
        } 
    }
})

db.inventory.find({
    instock: {
        $elemMatch: {
            qty: { $gt: 10, $lte: 20}
        }
    }
})

db.inventory.find({
    "instock.qty": { $gt: 10, $lte: 20}
})

db.inventory.insertMany( [
   { 
       item: "journal-1", 
       instock: [ 
           { warehouse: "B", qty: 5 }
        ] 
    }
]);
db.inventory.find({
    "instock.qty": 5,
    "instock.warehouse": "A"
})

// Query for Null or Missing Fields
db.inventory.insertMany([
   { _id: 1, item: null },
   { _id: 2 }
])

db.inventory.find({
    item: null
})

db.inventory.find({
    item: { $type: 10}
})

db.inventory.find({
    item: {$exists: false}
})

// Update Documents
db.inventory.insertMany( [
   { item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
   { item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
   { item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
] );

// Update a Single Document
db.inventory.find({ item: "paper"})
