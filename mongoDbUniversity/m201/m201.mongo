//mongoimport --db mongo_university --collection people  people.json

// check result
db.people.count({email: {$exists: 1}})

// execute the following query and collect execution statistics
db.people.find({ssn: "720-38-5636"}).explain("executionStats")

//create an ascending index on ssn
db.people.createIndex({ssn: 1})

db.people.find({last_name: "Acevedo"}).explain("executionStats")

//insert a documents with an embedded document
db.examples.insertMany([
    {_id: 0, subdoc: {indexedField: "value", otherField: "value"}},
    {_id: 1, subdoc: {indexedField: "wrongValue", otherField: "value"}}
])

// create an index using dot-notation
db.examples.createIndex({"subdoc.indexedField": 1})

// explain a query using dot-notation
db.examples.find({"subdoc.indexedField": "value"}).explain("executionStats")

// explain a range query (using an index)
db.people.find({ssn: {$gt: "555-00-0000", $lt: "556-00-0000"}}).explain("executionStats")

// explain a query on a set of values
db.people.find({ ssn: { $in: ["001-29-9184", "177-45-0950", "265-67-9973"]}}).explain("executionStats")

// explain a query where only part of the predicates use a index
db.people.find({ 
    ssn: { $in: ["001-29-9184", "177-45-0950", "265-67-9973"]},
    last_name: { $gt: "H"}
}).explain("executionStats")






/// myJhipsterMongo
db.redemption_tx.find({
    $and: [
        {campaign_code: "string"},
        {channel: "string"}
    ],
    $or: [
        {campaign_code: "string1"},
        {campaign_code: "string12"}
    ]
})

db.redemption_tx.find({
    $or: [
        {campaign_code: "string1"},
        {campaign_code: "string12"},
        {
            $and: [
        {campaign_code: "string"},
        {channel: "string"}
    ]
        }
    ]
})

db.redemption_tx.find({
    $or: [
        {campaign_code: "string1"},
        {campaign_code: "string12"},
        {
            $and: [
        {campaign_code: "string"},
        {channel: "string"}
    ]
        }
    ]
})

db.redemption_tx.find()
